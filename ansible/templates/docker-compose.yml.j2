version: '3.8' 

services:
  
  db:
    image: mysql:8.0 
    container_name: "mysql_db-{{ app_env }}"
    hostname: db-{{ app_env }}
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "{{ db_root_password }}" 
      MYSQL_DATABASE: "tasks_db"
      MYSQL_USER: "tasks_user"
      MYSQL_PASSWORD: "{{ db_user_password }}"
    volumes:
      - mysql_data:/var/lib/mysql 
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      interval: 20s
      timeout: 10s
      retries: 5

  backend:
    image: {{ gcp_region }}-docker.pkg.dev/{{ gcp_project_id }}/{{ backend_artifact_repo }}/{{ backend_image_name }}:{{ image_tag }}
    container_name: "backend-{{ app_env }}"
    hostname: backend-{{ app_env }}
    restart: always
    ports:
      - "8080:3000" 
    environment:
      DB_HOST: "db-{{ app_env }}"
      DB_USER: "tasks_user"
      DB_PASSWORD: "{{ db_user_password }}" 
      DB_DATABASE: "tasks_db"
    depends_on:
      db: 
        condition: service_healthy 
    networks:
      - app-network
    
  frontend:
    image: {{ gcp_region }}-docker.pkg.dev/{{ gcp_project_id }}/{{ frontend_artifact_repo }}/{{ frontend_image_name }}:{{ image_tag }}
    container_name: "frontend-{{ app_env }}"
    hostname: frontend-{{ app_env }}
    ports:
      - "80:80"
    restart: always
    environment:
      BACKEND_HOST: "backend-{{ app_env }}"
    depends_on:
      - backend 
    networks:
      - app-network

  
  prometheus:
    image: prom/prometheus:latest
    container_name: "prometheus-{{ app_env }}"
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      
      - /opt/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: "grafana-{{ app_env }}"
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_password }}
    depends_on:
      - prometheus
    networks:
      - app-network

volumes:
  mysql_data: 
  grafana-storage: 

networks:
  app-network:
    driver: bridge