name: Build, Provision VM, and Deploy with Ansible

on:
  push:
    branches: [ main, development ]
  workflow_dispatch: 

env:
  GCP_PROJECT_ID: exalted-legacy-459419-m8 
  GCP_REGION: southamerica-east1 
  GCP_ZONE: southamerica-east1-a  
  BACKEND_ARTIFACT_REPO: todolist-backend-repo 
  FRONTEND_ARTIFACT_REPO: todolist-frontend-repo 
  BACKEND_IMAGE_NAME: todolist-ua-back 
  FRONTEND_IMAGE_NAME: todolist-ua-front 
  IMAGE_TAG: ${{ github.sha }}
  APP_ENV: ${{ github.ref == 'refs/heads/main' && 'production' || 'stage' }}
  TERRAFORM_DIR: ./terraform
  ANSIBLE_DIR: ./ansible
  SSH_USER_ON_VM: githubactions 

jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    environment: gcp
    permissions:
      contents: 'read'
      id-token: 'write' 

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker to use gcloud credential helper
        run: gcloud auth configure-docker us-docker.pkg.dev --quiet

      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            us-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.BACKEND_ARTIFACT_REPO }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            us-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.BACKEND_ARTIFACT_REPO }}/${{ env.BACKEND_IMAGE_NAME }}:latest-${{ env.APP_ENV }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: . 
          file: ./Dockerfile 
          push: true
          tags: |
            us-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_ARTIFACT_REPO }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            us-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_ARTIFACT_REPO }}/${{ env.FRONTEND_IMAGE_NAME }}:latest-${{ env.APP_ENV }}
          build-args: |
            BACKEND_HOST=backend

  provision-and-deploy:
    name: Provision Infrastructure and Deploy Application
    runs-on: ubuntu-latest
    environment: gcp
    needs: build-and-push-images 
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud (for Terraform)
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
        

      - name: Terraform Init
        id: init
        run: |
          terraform init \
            -backend-config="bucket=tf-state-261909652337-bucket" \
            -backend-config="prefix=terraform/state/${{ env.APP_ENV }}"
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -var="gcp_project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="gcp_region=${{ env.GCP_REGION }}" \
            -var="gcp_zone=${{ env.GCP_ZONE }}" \
            -var="environment=${{ env.APP_ENV }}" \
            -var="ssh_user=${{ env.SSH_USER_ON_VM }}" \
            -var="ssh_public_key=${{ secrets.VM_SSH_PUBLIC_KEY }}" \
            -out=tfplan -no-color
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Get VM Public IP from Terraform Output
        id: get_ip
        run: |
          VM_IP=$(terraform output -raw instance_public_ip)
          echo "VM_PUBLIC_IP=$VM_IP" >> $GITHUB_ENV
          echo "VM IP: $VM_IP"
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Setup SSH Agent and Add Private Key for Ansible
        env:
          ANSIBLE_SSH_PRIVATE_KEY: ${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${ANSIBLE_SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa_ansible
          chmod 600 ~/.ssh/id_rsa_ansible
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa_ansible
          echo "StrictHostKeyChecking no" > ~/.ssh/config
          echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Install Ansible and Collections
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          ansible-galaxy collection install community.docker google.cloud

      - name: Create Ansible Inventory File
        run: |
          echo "[gcp_vms]" > inventory.ini
          echo "${{ env.VM_PUBLIC_IP }} ansible_user=${{ env.SSH_USER_ON_VM }} ansible_ssh_private_key_file=~/.ssh/id_rsa_ansible" >> inventory.ini
          echo "Created inventory.ini:"
          cat inventory.ini
        working-directory: ${{ env.ANSIBLE_DIR }}

      - name: Run Ansible Playbook
        run: |
          ansible-playbook playbook.yml \
            -i inventory.ini \
            --extra-vars "gcp_project_id=${{ env.GCP_PROJECT_ID }}" \
            --extra-vars "backend_artifact_repo=${{ env.BACKEND_ARTIFACT_REPO }}" \
            --extra-vars "backend_image_name=${{ env.BACKEND_IMAGE_NAME }}" \
            --extra-vars "frontend_artifact_repo=${{ env.FRONTEND_ARTIFACT_REPO }}" \
            --extra-vars "frontend_image_name=${{ env.FRONTEND_IMAGE_NAME }}" \
            --extra-vars "image_tag=${{ env.IMAGE_TAG }}" \
            --extra-vars "app_dir=/opt/app-${{ env.APP_ENV }}" \
            --extra-vars "ssh_user_on_vm=${{ env.SSH_USER_ON_VM }}" \
            --extra-vars "db_user=tasks_user" \
            --extra-vars "secrets_db_user_password=SENHASECRETAusuario" \
            --extra-vars "secrets_db_root_password=SENHASECRETAmaster" \
            --extra-vars "db_database_name=tasks_db" \
            --extra-vars "backend_host_port=8080" \
            --extra-vars "app_env=${{ env.APP_ENV }}"
        working-directory: ${{ env.ANSIBLE_DIR }}

      - name: Send Email Notification (SendGrid)
        if: env.APP_ENV == 'stage' && success() 
        run: |
          curl --request POST \
            --url https://api.sendgrid.com/v3/mail/send \
            --header "Authorization: Bearer ${{ secrets.SENDGRID_API_KEY }}" \
            --header 'Content-Type: application/json' \
            --data '{
              "personalizations": [{
                "to": [{"email": "guilhermefranchin2@gmail.com"}],
                "subject": "Nova versão do sistema (${{ env.APP_ENV }}) disponível na VM"
              }],
              "from": {"email": "guilherme@franch.in"},
              "content": [{
                "type": "text/plain",
                "value": "A nova versão da aplicação foi implantada na VM do ambiente ${{ env.APP_ENV }}. IP: ${{ env.VM_PUBLIC_IP }}. Tag: ${{ env.IMAGE_TAG }}"
              }]
            }'
