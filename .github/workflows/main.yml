name: Build and Deploy

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    environment: bastion
    runs-on: ubuntu-latest
    env:
      HOST_BACK: ${{ secrets.HOST_BACK }}           
      HOST_BASTION: ${{ secrets.HOST_BASTION }}       
      HOST_FRONT: ${{ secrets.HOST_FRONT }}           
      IMAGE_NAME_BACK: guifranchim/todolist-ua-back
      IMAGE_NAME_FRONT: guifranchim/todolist-ua-front
      TAG: latest
    steps:
      - name: Checkout do Repositório
        uses: actions/checkout@v3

      - name: Configurar o Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login no Docker Hub
        uses: docker/login-action@v2
        with:
          ecr: false
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          logout: true

      - name: Build e Push da Imagem do Backend
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME_BACK }}:${{ env.TAG }}

      - name: Build e Push da Imagem do Frontend
        run: |
          docker build -t ${{ env.IMAGE_NAME_FRONT }}:${{ env.TAG }} .
          docker push ${{ env.IMAGE_NAME_FRONT }}:${{ env.TAG }}

      - name: Debug Variáveis de Ambiente
        run: |
          echo "HOST_FRONT: ${HOST_FRONT}"
          echo "HOST_BACK: ${HOST_BACK}"
          echo "HOST_BASTION: ${HOST_BASTION}"

      - name: Deploy Remoto via SSH pelo Bastion
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.HOST_BASTION }}
          username: ec2-user
          key: ${{ secrets.PEM }}
          script: |
            
            cd ~
            echo "Conectado no Bastion: $(hostname)"
            
            echo "Atualizando container Frontend no host ${HOST_FRONT}..."
            ssh -o StrictHostKeyChecking=no -i ~/my-key-pair.pem ec2-user@${HOST_FRONT} "docker pull ${IMAGE_NAME_FRONT}:${TAG} && docker rm -f container_front || true && docker run -d --restart always --name container_front -p 80:80 ${IMAGE_NAME_FRONT}:${TAG}"
            
            echo "Atualizando container Backend no host ${HOST_BACK}..."
            ssh -o StrictHostKeyChecking=no -i ~/my-key-pair.pem ec2-user@${HOST_BACK} "docker pull ${IMAGE_NAME_BACK}:${TAG} && docker rm -f container_back || true && docker run -d --restart always --name container_back -p 3000:3000 ${IMAGE_NAME_BACK}:${TAG}"
