name: Deploy Application to VM

on:
  push:
    branches: [ main, development ]
  workflow_dispatch: 

env:
  BACKEND_ARTIFACT_REPO: todolist-backend-repo-vm 
  FRONTEND_ARTIFACT_REPO: todolist-frontend-repo-vm
  
  BACKEND_IMAGE_NAME: todolist-ua-back-vm
  FRONTEND_IMAGE_NAME: todolist-ua-front-vm
  
  TERRAFORM_DIR: ./terraform
  ANSIBLE_DIR: ./ansible
  SSH_USER_ON_VM: githubactions
  GCP_REGION: southamerica-east1
  GCP_ZONE: southamerica-east1-a

jobs:
  build-provision-deploy:
    name: Build, Provision, and Deploy
    runs-on: ubuntu-latest
    
    
    environment: 
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'stage' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Environment Name
        id: get_env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "APP_ENV=production" >> $GITHUB_OUTPUT
          else
            echo "APP_ENV=stage" >> $GITHUB_OUTPUT
          fi

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} 

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        
      - name: Terraform Init
        run: |
          TF_BUCKET="tf-state-${{ secrets.GCP_PROJECT_ID }}"
          gcloud storage buckets describe gs://${TF_BUCKET} >/dev/null 2>&1 || gcloud storage buckets create gs://${TF_BUCKET} --project=${{ secrets.GCP_PROJECT_ID }} --location=${{ env.GCP_REGION }}
          terraform init \
            -backend-config="bucket=${TF_BUCKET}" \
            -backend-config="prefix=terraform/state/vm-${{ steps.get_env.outputs.APP_ENV }}"
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            -var="gcp_region=${{ env.GCP_REGION }}" \
            -var="gcp_zone=${{ env.GCP_ZONE }}" \
            -var="environment=${{ steps.get_env.outputs.APP_ENV }}" \
            -var="ssh_user=${{ env.SSH_USER_ON_VM }}" \
            -var="ssh_public_key=${{ secrets.VM_SSH_PUBLIC_KEY }}"
        working-directory: ${{ env.TERRAFORM_DIR }}


      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev --quiet

      
      - name: Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.BACKEND_ARTIFACT_REPO }}-${{ steps.get_env.outputs.APP_ENV }}/${{ env.BACKEND_IMAGE_NAME }}:${{ github.sha }}

      - name: Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: . 
          file: ./Dockerfile 
          push: true
          tags: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.FRONTEND_ARTIFACT_REPO }}-${{ steps.get_env.outputs.APP_ENV }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ github.sha }}
          build-args: | 
            BACKEND_HOST=backend 

      - name: Get VM Public IP from Terraform Output
        id: get_ip
        run: |
          VM_IP=$(terraform output -raw instance_public_ip)
          echo "VM_PUBLIC_IP=$VM_IP" >> $GITHUB_ENV
        working-directory: ${{ env.TERRAFORM_DIR }}

      
      - name: Setup SSH and Ansible
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.ANSIBLE_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa_ansible
          chmod 600 ~/.ssh/id_rsa_ansible
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa_ansible
          echo "StrictHostKeyChecking no" > ~/.ssh/config
          echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config
          python -m pip install --upgrade pip
          pip install ansible-core
          ansible-galaxy collection install community.docker google.cloud

      - name: Run Ansible Playbook
        run: |
          ansible-playbook playbook.yml \
            -i "${{ env.VM_PUBLIC_IP }}," \
            --user "${{ env.SSH_USER_ON_VM }}" \
            --private-key ~/.ssh/id_rsa_ansible \
            --extra-vars "gcp_project_id=${{ secrets.GCP_PROJECT_ID }}" \
            --extra-vars "gcp_region=${{ env.GCP_REGION }}" \
            --extra-vars "backend_artifact_repo=${{ env.BACKEND_ARTIFACT_REPO }}-${{ steps.get_env.outputs.APP_ENV }}" \
            --extra-vars "backend_image_name=${{ env.BACKEND_IMAGE_NAME }}" \
            --extra-vars "frontend_artifact_repo=${{ env.FRONTEND_ARTIFACT_REPO }}-${{ steps.get_env.outputs.APP_ENV }}" \
            --extra-vars "frontend_image_name=${{ env.FRONTEND_IMAGE_NAME }}" \
            --extra-vars "image_tag=${{ github.sha }}" \
            --extra-vars "app_env=${{ steps.get_env.outputs.APP_ENV }}" \
            --extra-vars "db_root_password=${{ secrets.DB_ROOT_PASSWORD }}" \
            --extra-vars "db_user_password=${{ secrets.DB_USER_PASSWORD }}"
        working-directory: ${{ env.ANSIBLE_DIR }}

      - name: Final Output
        run: echo "Deployment for ${{ steps.get_env.outputs.APP_ENV }} successful. Access at http://${{ env.VM_PUBLIC_IP }}"