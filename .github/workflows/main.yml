name: Build and Deploy to GKE

on:
  push:
    branches:
      - main
      - development

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'gcp-production' || 'gcp-staging' }}
    env:
      GCP_PROJECT: exalted-legacy-459419-m8
      GKE_CLUSTER: todo-ua
      GKE_ZONE: southamerica-east1-a
      BACK_REPO: todolist-backend-repo
      FRONT_REPO: todolist-frontend-repo
      IMAGE_REPO_BACK: todolist-ua-back
      IMAGE_REPO_FRONT: todolist-ua-front
      TAG: ${{ github.sha }}
      NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'production' || 'stage' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up gcloud CLI (with GKE auth plugin)
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.GCP_PROJECT }}
          export_default_credentials: true
          install_components: gke-gcloud-auth-plugin

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-docker.pkg.dev --quiet

      - name: Build & Push Backend to Artifact Registry
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            us-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.BACK_REPO }}/${{ env.IMAGE_REPO_BACK }}:${{ env.TAG }}

      - name: Build & Push Frontend to Artifact Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            us-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.FRONT_REPO }}/${{ env.IMAGE_REPO_FRONT }}:${{ env.TAG }}

      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} \
            --zone ${{ env.GKE_ZONE }} \
            --project ${{ env.GCP_PROJECT }}

      - name: Ensure namespace exists
        run: |
          kubectl get namespace ${{ env.NAMESPACE }} || kubectl create namespace ${{ env.NAMESPACE }}

      - name: Create MySQL PVC
        run: |
          cat <<EOF | kubectl apply -f - -n ${{ env.NAMESPACE }}
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: mysql-pvc
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 5Gi
            storageClassName: standard
          EOF

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f infra/app.yaml -n ${{ env.NAMESPACE }}

      - name: Deploy to GKE
        run: |
          kubectl set image deployment/${{ env.IMAGE_REPO_BACK }} \
            ${{ env.IMAGE_REPO_BACK }}=us-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.BACK_REPO }}/${{ env.IMAGE_REPO_BACK }}:${{ env.TAG }} \
            --namespace ${{ env.NAMESPACE }}

          kubectl set image deployment/${{ env.IMAGE_REPO_FRONT }} \
            ${{ env.IMAGE_REPO_FRONT }}=us-docker.pkg.dev/${{ env.GCP_PROJECT }}/${{ env.FRONT_REPO }}/${{ env.IMAGE_REPO_FRONT }}:${{ env.TAG }} \
            --namespace ${{ env.NAMESPACE }}

          kubectl rollout status deployment/${{ env.IMAGE_REPO_BACK }} --namespace ${{ env.NAMESPACE }}
          kubectl rollout status deployment/${{ env.IMAGE_REPO_FRONT }} --namespace ${{ env.NAMESPACE }}
