# --------------------------
# Namespace
# --------------------------
apiVersion: v1
kind: Namespace
metadata:
  name: stage
---
# --------------------------
# PersistentVolume (hostPath example)
# --------------------------
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv-stage
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /mnt/data/mysql-stage
---
# --------------------------
# PersistentVolumeClaim
# --------------------------
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: stage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: mysql-pv-stage
  storageClassName: standard
---
# --------------------------
# DB Secret
# --------------------------
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: stage
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzcWw=     # "mysql"
  MYSQL_DATABASE: dGFza3NfZGI=      # "tasks_db"
  MYSQL_USER: bXlzcWw=              # "mysql"
  MYSQL_PASSWORD: bXlzcWw=          # "mysql"
---
# --------------------------
# MySQL Deployment & Service
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_PASSWORD
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: stage
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
    - port: 3306
      targetPort: 3306
---
# --------------------------
# Backend Deployment & Service
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: us-docker.pkg.dev/exalted-legacy-459419-m8/todolist-backend-repo/todolist-ua-back:latest
          ports:
            - containerPort: 3000
          env:
            - name: DB_HOST
              value: "db-service"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_PASSWORD
            - name: DB_DATABASE
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: MYSQL_DATABASE
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: stage
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
    - port: 3000
      targetPort: 3000
---
# --------------------------
# Frontend Deployment & Service
# --------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: us-docker.pkg.dev/exalted-legacy-459419-m8/todolist-frontend-repo/todolist-ua-front:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: stage
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30080
