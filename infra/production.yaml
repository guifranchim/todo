
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: production
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: mysql-pvc
#   namespace: production
# spec:
#   storageClassName: standard
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi
# ---
# apiVersion: v1
# kind: Secret
# metadata:
#   name: db-secret
#   namespace: production
# type: Opaque
# data:
#   MYSQL_ROOT_PASSWORD: bXlzcWw=
#   MYSQL_DATABASE:     dGFza3NfZGI=
#   MYSQL_USER:         bXlzcWw=
#   MYSQL_PASSWORD:     bXlzcWw=
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: mysql
#   namespace: production
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: mysql
#   template:
#     metadata:
#       labels:
#         app: mysql
#     spec:
#       containers:
#       - name: mysql
#         image: mysql:8.0
#         env:
#         - name: MYSQL_ROOT_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: db-secret
#               key: MYSQL_ROOT_PASSWORD
#         - name: MYSQL_DATABASE
#           valueFrom:
#             secretKeyRef:
#               name: db-secret
#               key: MYSQL_DATABASE
#         - name: MYSQL_USER
#           valueFrom:
#             secretKeyRef:
#               name: db-secret
#               key: MYSQL_USER
#         - name: MYSQL_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: db-secret
#               key: MYSQL_PASSWORD
#         volumeMounts:
#         - name: mysql-storage
#           mountPath: /var/lib/mysql
#       volumes:
#       - name: mysql-storage
#         persistentVolumeClaim:
#           claimName: mysql-pvc
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: db-service
#   namespace: production
# spec:
#   type: ClusterIP
#   selector:
#     app: mysql
#   ports:
#   - port: 3306
#     targetPort: 3306
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: backend
#   namespace: production
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: backend
#   template:
#     metadata:
#       labels:
#         app: backend
#     spec:
#       containers:
#       - name: backend
#         image: IMAGE_BACKEND_PLACEHOLDER
#         ports:
#         - containerPort: 3000
#         env:
#         - name: DB_HOST
#           value: db-service
#         - name: DB_USER
#           valueFrom:
#             secretKeyRef:
#               name: db-secret
#               key: MYSQL_USER
#         - name: DB_PASSWORD
#           valueFrom:
#             secretKeyRef:
#               name: db-secret
#               key: MYSQL_PASSWORD
#         - name: DB_DATABASE
#           valueFrom:
#             secretKeyRef:
#               name: db-secret
#               key: MYSQL_DATABASE
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: backend-service
#   namespace: production
# spec:
#   type: ClusterIP
#   selector:
#     app: backend
#   ports:
#   - port: 3000
#     targetPort: 3000
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: frontend
#   namespace: production
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: frontend
#   template:
#     metadata:
#       labels:
#         app: frontend
#     spec:
#       containers:
#       - name: frontend
#         image: IMAGE_FRONTEND_PLACEHOLDER
#         ports:
#         - containerPort: 80
#         env:
#         - name: BACKEND_HOST
#           value: "backend-service.production.svc.cluster.local"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: frontend-service
#   namespace: production
# spec:
#   type: ClusterIP 
#   selector:
#     app: frontend
#   ports:
#   - port: 80
#     targetPort: 80
# ---
# apiVersion: networking.gke.io/v1
# kind: ManagedCertificate
# metadata:
#   name: prod-k8s-cert 
#   namespace: production
# spec:
#   domains:
#     - prod.k8s.franch.in

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: main-ingress
#   namespace: production
#   annotations:
#     kubernetes.io/ingress.global-static-ip-name: ingress-ip-franchin 
#     networking.gke.io/managed-certificates: prod-k8s-cert 
#     kubernetes.io/ingress.class: "gce"
# spec:
#   rules:
#     - host: prod.k8s.franch.in
#       http:
#         paths:
#           - path: /todo
#             pathType: Prefix 
#             backend:
#               service:
#                 name: frontend-service
#                 port:
#                   number: 80
#           - path: /grafana
#             pathType: Prefix
#             backend:
#               service:
#                 name: prometheus-grafana
#                 port:
#                   number: 80
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: prometheus-grafana
#   namespace: production
# spec:
#   type: ClusterIP
#   ports:
#   - name: http
#     port: 80
#     protocol: TCP
#     targetPort: 80
# ---
# apiVersion: v1
# kind: Endpoints
# metadata:
#   name: prometheus-grafana 
#   namespace: production
# subsets:
#   - addresses:
#     - ip: "34.118.226.180" 
#     ports:
#     - name: http
#       port: 80
#       protocol: TCP
# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: allow-backend-to-mysql
#   namespace: production
# spec:
#   podSelector:
#     matchLabels:
#       app: mysql
#   policyTypes:
#     - Ingress
#   ingress:
#     - from:
#         - podSelector:
#             matchLabels:
#               app: backend
#       ports:
#         - protocol: TCP
#           port: 3306
# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: allow-frontend-to-backend
#   namespace: production
# spec:
#   podSelector:
#     matchLabels:
#       app: backend
#   policyTypes:
#     - Ingress
#   ingress:
#     - from:
#         - podSelector:
#             matchLabels:
#               app: frontend
#       ports:
#         - protocol: TCP
#           port: 3000

# ---
# apiVersion: networking.k8s.io/v1
# kind: NetworkPolicy
# metadata:
#   name: allow-all-to-frontend
#   namespace: production
# spec:
#   podSelector:
#     matchLabels:
#       app: frontend
#   policyTypes:
#     - Ingress
#   ingress:
#     - {} 