apiVersion: v1
kind: Namespace
metadata:
  name: stage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: stage
spec:
  storageClassName: standard-rwo
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: db-secret
  namespace: stage
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: bXlzcWw=
  MYSQL_DATABASE:     dGFza3NfZGI=
  MYSQL_USER:         bXlzcWw=
  MYSQL_PASSWORD:     bXlzcWw=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        envFrom:
        - secretRef:
            name: db-secret
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: db-service
  namespace: stage
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: IMAGE_BACKEND_PLACEHOLDER
        ports:
        - containerPort: 3000
        env:
        - name: DB_HOST
          value: db-service
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: MYSQL_USER
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: MYSQL_PASSWORD
        - name: DB_DATABASE
          valueFrom:
            secretKeyRef:
              name: db-secret
              key: MYSQL_DATABASE
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: stage
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
  - port: 3000
    targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: stage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: IMAGE_FRONTEND_PLACEHOLDER
        ports:
        - containerPort: 80
        env:
        - name: BACKEND_HOST
          value: "backend-service.stage.svc.cluster.local"
---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: stage
  annotations:
    cloud.google.com/backend-config: '{"default": "frontend-health-check-config"}'
spec:
  type: ClusterIP 
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
---

apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: frontend-health-check-config
  namespace: stage
spec:
  healthCheck:
    requestPath: / 
    port: 80
    type: HTTP
---

apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: stage-k8s-cert 
  namespace: stage
spec:
  domains:
    - dev.k8s.franch.in
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: main-ingress-stage 
  namespace: stage
  annotations:
    kubernetes.io/ingress.global-static-ip-name: ingress-ip-stage 
    networking.gke.io/managed-certificates: stage-k8s-cert 
    kubernetes.io/ingress.class: "gce"
spec:
  rules:
    - host: dev.k8s.franch.in
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: frontend-service
                port:
                  number: 80
---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-to-mysql
  namespace: stage
spec:
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: backend
      ports:
        - protocol: TCP
          port: 3306
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-frontend-to-backend
  namespace: stage
spec:
  podSelector:
    matchLabels:
      app: backend
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: frontend
      ports:
        - protocol: TCP
          port: 3000
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-all-to-frontend
  namespace: stage
spec:
  podSelector:
    matchLabels:
      app: frontend
  policyTypes:
    - Ingress
  ingress:
  - from:
      - ipBlock:
          cidr: 130.211.0.0/22
      - ipBlock:
          cidr: 35.191.0.0/16
  - from:
      - namespaceSelector: {}